Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    LIST

Grammar

Rule 0     S' -> statement
Rule 1     statement -> NAME IS RECEIVE LPAREN STRING RPAREN
Rule 2     statement -> SHOW LPAREN DATA RPAREN
Rule 3     DATA -> INT
Rule 4     DATA -> STRING
Rule 5     statement -> LBRACKET term RBRACKET
Rule 6     term -> DATA
Rule 7     term -> DATA COMMA term
Rule 8     statement -> NAME IS DATA
Rule 9     statement -> NAME

Terminals, with rules where they appear

COMMA                : 7
INT                  : 3
IS                   : 1 8
LBRACKET             : 5
LIST                 : 
LPAREN               : 1 2
NAME                 : 1 8 9
RBRACKET             : 5
RECEIVE              : 1
RPAREN               : 1 2
SHOW                 : 2
STRING               : 1 4
error                : 

Nonterminals, with rules where they appear

DATA                 : 2 6 7 8
statement            : 0
term                 : 5 7

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . NAME IS RECEIVE LPAREN STRING RPAREN
    (2) statement -> . SHOW LPAREN DATA RPAREN
    (5) statement -> . LBRACKET term RBRACKET
    (8) statement -> . NAME IS DATA
    (9) statement -> . NAME

    NAME            shift and go to state 2
    SHOW            shift and go to state 3
    LBRACKET        shift and go to state 4

    statement                      shift and go to state 1

state 1

    (0) S' -> statement .



state 2

    (1) statement -> NAME . IS RECEIVE LPAREN STRING RPAREN
    (8) statement -> NAME . IS DATA
    (9) statement -> NAME .

    IS              shift and go to state 5
    $end            reduce using rule 9 (statement -> NAME .)


state 3

    (2) statement -> SHOW . LPAREN DATA RPAREN

    LPAREN          shift and go to state 6


state 4

    (5) statement -> LBRACKET . term RBRACKET
    (6) term -> . DATA
    (7) term -> . DATA COMMA term
    (3) DATA -> . INT
    (4) DATA -> . STRING

    INT             shift and go to state 9
    STRING          shift and go to state 10

    term                           shift and go to state 7
    DATA                           shift and go to state 8

state 5

    (1) statement -> NAME IS . RECEIVE LPAREN STRING RPAREN
    (8) statement -> NAME IS . DATA
    (3) DATA -> . INT
    (4) DATA -> . STRING

    RECEIVE         shift and go to state 11
    INT             shift and go to state 9
    STRING          shift and go to state 10

    DATA                           shift and go to state 12

state 6

    (2) statement -> SHOW LPAREN . DATA RPAREN
    (3) DATA -> . INT
    (4) DATA -> . STRING

    INT             shift and go to state 9
    STRING          shift and go to state 10

    DATA                           shift and go to state 13

state 7

    (5) statement -> LBRACKET term . RBRACKET

    RBRACKET        shift and go to state 14


state 8

    (6) term -> DATA .
    (7) term -> DATA . COMMA term

    RBRACKET        reduce using rule 6 (term -> DATA .)
    COMMA           shift and go to state 15


state 9

    (3) DATA -> INT .

    COMMA           reduce using rule 3 (DATA -> INT .)
    RBRACKET        reduce using rule 3 (DATA -> INT .)
    $end            reduce using rule 3 (DATA -> INT .)
    RPAREN          reduce using rule 3 (DATA -> INT .)


state 10

    (4) DATA -> STRING .

    COMMA           reduce using rule 4 (DATA -> STRING .)
    RBRACKET        reduce using rule 4 (DATA -> STRING .)
    $end            reduce using rule 4 (DATA -> STRING .)
    RPAREN          reduce using rule 4 (DATA -> STRING .)


state 11

    (1) statement -> NAME IS RECEIVE . LPAREN STRING RPAREN

    LPAREN          shift and go to state 16


state 12

    (8) statement -> NAME IS DATA .

    $end            reduce using rule 8 (statement -> NAME IS DATA .)


state 13

    (2) statement -> SHOW LPAREN DATA . RPAREN

    RPAREN          shift and go to state 17


state 14

    (5) statement -> LBRACKET term RBRACKET .

    $end            reduce using rule 5 (statement -> LBRACKET term RBRACKET .)


state 15

    (7) term -> DATA COMMA . term
    (6) term -> . DATA
    (7) term -> . DATA COMMA term
    (3) DATA -> . INT
    (4) DATA -> . STRING

    INT             shift and go to state 9
    STRING          shift and go to state 10

    DATA                           shift and go to state 8
    term                           shift and go to state 18

state 16

    (1) statement -> NAME IS RECEIVE LPAREN . STRING RPAREN

    STRING          shift and go to state 19


state 17

    (2) statement -> SHOW LPAREN DATA RPAREN .

    $end            reduce using rule 2 (statement -> SHOW LPAREN DATA RPAREN .)


state 18

    (7) term -> DATA COMMA term .

    RBRACKET        reduce using rule 7 (term -> DATA COMMA term .)


state 19

    (1) statement -> NAME IS RECEIVE LPAREN STRING . RPAREN

    RPAREN          shift and go to state 20


state 20

    (1) statement -> NAME IS RECEIVE LPAREN STRING RPAREN .

    $end            reduce using rule 1 (statement -> NAME IS RECEIVE LPAREN STRING RPAREN .)

