Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    LIST

Grammar

Rule 0     S' -> statement
Rule 1     statement -> RECEIVE LPAREN DATA RPAREN
Rule 2     statement -> SHOW LPAREN DATA RPAREN
Rule 3     statement -> SHOW LPAREN NAME RPAREN
Rule 4     DATA -> INT
Rule 5     DATA -> DOUBLE
Rule 6     DATA -> STRING
Rule 7     DATA -> list
Rule 8     DATA -> statement
Rule 9     term -> DATA
Rule 10    term -> DATA COMMA term
Rule 11    list -> LBRACKET term RBRACKET
Rule 12    statement -> NAME IS DATA
Rule 13    statement -> NAME

Terminals, with rules where they appear

COMMA                : 10
DOUBLE               : 5
INT                  : 4
IS                   : 12
LBRACKET             : 11
LIST                 : 
LPAREN               : 1 2 3
NAME                 : 3 12 13
RBRACKET             : 11
RECEIVE              : 1
RPAREN               : 1 2 3
SHOW                 : 2 3
STRING               : 6
error                : 

Nonterminals, with rules where they appear

DATA                 : 1 2 9 10 12
list                 : 7
statement            : 8 0
term                 : 10 11

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . RECEIVE LPAREN DATA RPAREN
    (2) statement -> . SHOW LPAREN DATA RPAREN
    (3) statement -> . SHOW LPAREN NAME RPAREN
    (12) statement -> . NAME IS DATA
    (13) statement -> . NAME

    RECEIVE         shift and go to state 2
    SHOW            shift and go to state 3
    NAME            shift and go to state 4

    statement                      shift and go to state 1

state 1

    (0) S' -> statement .



state 2

    (1) statement -> RECEIVE . LPAREN DATA RPAREN

    LPAREN          shift and go to state 5


state 3

    (2) statement -> SHOW . LPAREN DATA RPAREN
    (3) statement -> SHOW . LPAREN NAME RPAREN

    LPAREN          shift and go to state 6


state 4

    (12) statement -> NAME . IS DATA
    (13) statement -> NAME .

    IS              shift and go to state 7
    $end            reduce using rule 13 (statement -> NAME .)
    RPAREN          reduce using rule 13 (statement -> NAME .)
    COMMA           reduce using rule 13 (statement -> NAME .)
    RBRACKET        reduce using rule 13 (statement -> NAME .)


state 5

    (1) statement -> RECEIVE LPAREN . DATA RPAREN
    (4) DATA -> . INT
    (5) DATA -> . DOUBLE
    (6) DATA -> . STRING
    (7) DATA -> . list
    (8) DATA -> . statement
    (11) list -> . LBRACKET term RBRACKET
    (1) statement -> . RECEIVE LPAREN DATA RPAREN
    (2) statement -> . SHOW LPAREN DATA RPAREN
    (3) statement -> . SHOW LPAREN NAME RPAREN
    (12) statement -> . NAME IS DATA
    (13) statement -> . NAME

    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    STRING          shift and go to state 11
    LBRACKET        shift and go to state 14
    RECEIVE         shift and go to state 2
    SHOW            shift and go to state 3
    NAME            shift and go to state 4

    DATA                           shift and go to state 8
    list                           shift and go to state 12
    statement                      shift and go to state 13

state 6

    (2) statement -> SHOW LPAREN . DATA RPAREN
    (3) statement -> SHOW LPAREN . NAME RPAREN
    (4) DATA -> . INT
    (5) DATA -> . DOUBLE
    (6) DATA -> . STRING
    (7) DATA -> . list
    (8) DATA -> . statement
    (11) list -> . LBRACKET term RBRACKET
    (1) statement -> . RECEIVE LPAREN DATA RPAREN
    (2) statement -> . SHOW LPAREN DATA RPAREN
    (3) statement -> . SHOW LPAREN NAME RPAREN
    (12) statement -> . NAME IS DATA
    (13) statement -> . NAME

    NAME            shift and go to state 16
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    STRING          shift and go to state 11
    LBRACKET        shift and go to state 14
    RECEIVE         shift and go to state 2
    SHOW            shift and go to state 3

    DATA                           shift and go to state 15
    list                           shift and go to state 12
    statement                      shift and go to state 13

state 7

    (12) statement -> NAME IS . DATA
    (4) DATA -> . INT
    (5) DATA -> . DOUBLE
    (6) DATA -> . STRING
    (7) DATA -> . list
    (8) DATA -> . statement
    (11) list -> . LBRACKET term RBRACKET
    (1) statement -> . RECEIVE LPAREN DATA RPAREN
    (2) statement -> . SHOW LPAREN DATA RPAREN
    (3) statement -> . SHOW LPAREN NAME RPAREN
    (12) statement -> . NAME IS DATA
    (13) statement -> . NAME

    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    STRING          shift and go to state 11
    LBRACKET        shift and go to state 14
    RECEIVE         shift and go to state 2
    SHOW            shift and go to state 3
    NAME            shift and go to state 4

    DATA                           shift and go to state 17
    list                           shift and go to state 12
    statement                      shift and go to state 13

state 8

    (1) statement -> RECEIVE LPAREN DATA . RPAREN

    RPAREN          shift and go to state 18


state 9

    (4) DATA -> INT .

    RPAREN          reduce using rule 4 (DATA -> INT .)
    $end            reduce using rule 4 (DATA -> INT .)
    COMMA           reduce using rule 4 (DATA -> INT .)
    RBRACKET        reduce using rule 4 (DATA -> INT .)


state 10

    (5) DATA -> DOUBLE .

    RPAREN          reduce using rule 5 (DATA -> DOUBLE .)
    $end            reduce using rule 5 (DATA -> DOUBLE .)
    COMMA           reduce using rule 5 (DATA -> DOUBLE .)
    RBRACKET        reduce using rule 5 (DATA -> DOUBLE .)


state 11

    (6) DATA -> STRING .

    RPAREN          reduce using rule 6 (DATA -> STRING .)
    $end            reduce using rule 6 (DATA -> STRING .)
    COMMA           reduce using rule 6 (DATA -> STRING .)
    RBRACKET        reduce using rule 6 (DATA -> STRING .)


state 12

    (7) DATA -> list .

    RPAREN          reduce using rule 7 (DATA -> list .)
    $end            reduce using rule 7 (DATA -> list .)
    COMMA           reduce using rule 7 (DATA -> list .)
    RBRACKET        reduce using rule 7 (DATA -> list .)


state 13

    (8) DATA -> statement .

    RPAREN          reduce using rule 8 (DATA -> statement .)
    $end            reduce using rule 8 (DATA -> statement .)
    COMMA           reduce using rule 8 (DATA -> statement .)
    RBRACKET        reduce using rule 8 (DATA -> statement .)


state 14

    (11) list -> LBRACKET . term RBRACKET
    (9) term -> . DATA
    (10) term -> . DATA COMMA term
    (4) DATA -> . INT
    (5) DATA -> . DOUBLE
    (6) DATA -> . STRING
    (7) DATA -> . list
    (8) DATA -> . statement
    (11) list -> . LBRACKET term RBRACKET
    (1) statement -> . RECEIVE LPAREN DATA RPAREN
    (2) statement -> . SHOW LPAREN DATA RPAREN
    (3) statement -> . SHOW LPAREN NAME RPAREN
    (12) statement -> . NAME IS DATA
    (13) statement -> . NAME

    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    STRING          shift and go to state 11
    LBRACKET        shift and go to state 14
    RECEIVE         shift and go to state 2
    SHOW            shift and go to state 3
    NAME            shift and go to state 4

    term                           shift and go to state 19
    DATA                           shift and go to state 20
    list                           shift and go to state 12
    statement                      shift and go to state 13

state 15

    (2) statement -> SHOW LPAREN DATA . RPAREN

    RPAREN          shift and go to state 21


state 16

    (3) statement -> SHOW LPAREN NAME . RPAREN
    (12) statement -> NAME . IS DATA
    (13) statement -> NAME .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 22
    IS              shift and go to state 7

  ! RPAREN          [ reduce using rule 13 (statement -> NAME .) ]


state 17

    (12) statement -> NAME IS DATA .

    $end            reduce using rule 12 (statement -> NAME IS DATA .)
    RPAREN          reduce using rule 12 (statement -> NAME IS DATA .)
    COMMA           reduce using rule 12 (statement -> NAME IS DATA .)
    RBRACKET        reduce using rule 12 (statement -> NAME IS DATA .)


state 18

    (1) statement -> RECEIVE LPAREN DATA RPAREN .

    $end            reduce using rule 1 (statement -> RECEIVE LPAREN DATA RPAREN .)
    RPAREN          reduce using rule 1 (statement -> RECEIVE LPAREN DATA RPAREN .)
    COMMA           reduce using rule 1 (statement -> RECEIVE LPAREN DATA RPAREN .)
    RBRACKET        reduce using rule 1 (statement -> RECEIVE LPAREN DATA RPAREN .)


state 19

    (11) list -> LBRACKET term . RBRACKET

    RBRACKET        shift and go to state 23


state 20

    (9) term -> DATA .
    (10) term -> DATA . COMMA term

    RBRACKET        reduce using rule 9 (term -> DATA .)
    COMMA           shift and go to state 24


state 21

    (2) statement -> SHOW LPAREN DATA RPAREN .

    $end            reduce using rule 2 (statement -> SHOW LPAREN DATA RPAREN .)
    RPAREN          reduce using rule 2 (statement -> SHOW LPAREN DATA RPAREN .)
    COMMA           reduce using rule 2 (statement -> SHOW LPAREN DATA RPAREN .)
    RBRACKET        reduce using rule 2 (statement -> SHOW LPAREN DATA RPAREN .)


state 22

    (3) statement -> SHOW LPAREN NAME RPAREN .

    $end            reduce using rule 3 (statement -> SHOW LPAREN NAME RPAREN .)
    RPAREN          reduce using rule 3 (statement -> SHOW LPAREN NAME RPAREN .)
    COMMA           reduce using rule 3 (statement -> SHOW LPAREN NAME RPAREN .)
    RBRACKET        reduce using rule 3 (statement -> SHOW LPAREN NAME RPAREN .)


state 23

    (11) list -> LBRACKET term RBRACKET .

    RPAREN          reduce using rule 11 (list -> LBRACKET term RBRACKET .)
    $end            reduce using rule 11 (list -> LBRACKET term RBRACKET .)
    COMMA           reduce using rule 11 (list -> LBRACKET term RBRACKET .)
    RBRACKET        reduce using rule 11 (list -> LBRACKET term RBRACKET .)


state 24

    (10) term -> DATA COMMA . term
    (9) term -> . DATA
    (10) term -> . DATA COMMA term
    (4) DATA -> . INT
    (5) DATA -> . DOUBLE
    (6) DATA -> . STRING
    (7) DATA -> . list
    (8) DATA -> . statement
    (11) list -> . LBRACKET term RBRACKET
    (1) statement -> . RECEIVE LPAREN DATA RPAREN
    (2) statement -> . SHOW LPAREN DATA RPAREN
    (3) statement -> . SHOW LPAREN NAME RPAREN
    (12) statement -> . NAME IS DATA
    (13) statement -> . NAME

    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    STRING          shift and go to state 11
    LBRACKET        shift and go to state 14
    RECEIVE         shift and go to state 2
    SHOW            shift and go to state 3
    NAME            shift and go to state 4

    DATA                           shift and go to state 20
    term                           shift and go to state 25
    list                           shift and go to state 12
    statement                      shift and go to state 13

state 25

    (10) term -> DATA COMMA term .

    RBRACKET        reduce using rule 10 (term -> DATA COMMA term .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 16 resolved as shift
